package com.sysmex.fis.controller;

import java.net.URI;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.env.Environment;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;
import com.sysmex.fis.util.Util;

@RestController
@RequestMapping("/fis")
public class FISController {

	private final Logger logger = LoggerFactory.getLogger(this.getClass());

	@Autowired
	Util util;

	@Value("${service.projectServiceId}")
	private String projectServiceId;

	@Value("${service.hrServiceId}")
	private String hrServiceId;

	@Autowired
	private Environment environment;

	private RestTemplate restTemplate = new RestTemplate();

	@RequestMapping("")
	public String hello() {
		return "Hello FIS!";
	}

	@ResponseBody
	@RequestMapping("/project/{id}")
	@HystrixCommand(fallbackMethod = "fallbackMethodFISProject")
	public String getFISProject(@PathVariable int id) {
		String html = "<br/><h3>Spring FIS Active Profile: " + getActiveProfile() + "</h3>";

		URI uri = util.getServiceUrl(projectServiceId, "http://localhost:0000/");
		String url = uri.toString() + "/project/fisProject/" + id;
		logger.debug("getProject from URL: {}", url);
		ResponseEntity<String> resultStr = restTemplate.getForEntity(url, String.class);
		logger.debug("getProject http-status: {}", resultStr.getStatusCode());
		logger.debug("getProject body: {}", resultStr.getBody());

		html = resultStr.getBody() + html;
		return html;
	}

	public String fallbackMethodFISProject(int id) {
		return "fallbackMethodFISProject";
	}

	@ResponseBody
	@RequestMapping("/employee/{id}")
	@HystrixCommand(fallbackMethod = "fallbackMethodFISEmployee")
	public String getFISEmployee(@PathVariable int id) {
		String html = "<br/><h3>Spring FIS Active Profile: " + getActiveProfile() + "</h3>";

		URI uri = util.getServiceUrl(hrServiceId, "http://localhost:0000/");
		String url = uri.toString() + "/hr/fisEmployee/" + id;
		logger.debug("getEmployee from URL: {}", url);
		ResponseEntity<String> resultStr = restTemplate.getForEntity(url, String.class);
		logger.debug("getEmployee http-status: {}", resultStr.getStatusCode());
		logger.debug("getEmployee body: {}", resultStr.getBody());

		html = resultStr.getBody() + html;
		return html;
	}
	
	public String fallbackMethodFISEmployee(int id) {
		return "fallbackMethodFISEmployee";
	}
	
	public String fallbackMethodFsoftEmployee(int id) {
		return "fallbackMethodFsoftEmployee";
	}
	
	@ResponseBody
	@RequestMapping("/fail")
	@HystrixCommand(fallbackMethod = "fallbackMethodFISFail")
	public String getFISFail() throws Exception {
		throw new Exception("Test Fallback");
	}

	private String getActiveProfile() {
		String profile = "";
		if (environment.getActiveProfiles().length > 0) {
			profile = environment.getActiveProfiles()[0];
		}
		logger.info("Profile Trip:" + profile);
		return profile;
	}
}
